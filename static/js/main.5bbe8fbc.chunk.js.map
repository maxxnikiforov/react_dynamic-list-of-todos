{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TODOS_API","USERS_API","a","fetch","response","json","todos","userId","user","TodoList","chooseUser","selectedUserId","className","map","title","completed","id","classNames","type","checked","readOnly","value","onClick","CurrentUser","currentUserId","useState","setUser","useEffect","getUser","then","newUser","name","email","phone","App","setSelectedUserId","setTodos","query","setQuery","statusTodo","setStatusTodo","getTodos","all","filteredTodos","filter","toLowerCase","includes","showTodos","preparedTodo","onChange","event","target","placeholder","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5bbe8fbc.chunk.js","sourcesContent":["const TODOS_API = 'https://mate.academy/students-api/todos';\nconst USERS_API = 'https://mate.academy/students-api/users';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(TODOS_API);\n  const todos = await response.json();\n\n  return todos;\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${USERS_API}/${userId}`);\n  const user = await response.json();\n\n  return user;\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  chooseUser: (id: number) => void;\n  selectedUserId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  chooseUser,\n  selectedUserId,\n}) => {\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {todos.map(({\n            userId,\n            title,\n            completed,\n            id,\n          }) => (\n            <li\n              key={id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': completed },\n                { 'TodoList__item--unchecked': !completed },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" checked={completed} readOnly />\n                <p>{title}</p>\n              </label>\n              {userId && (\n                <button\n                  className={classNames(\n                    'TodoList__user-button', 'button',\n                    {\n                      'TodoList__user-button--selected': selectedUserId\n                     === userId,\n                    },\n                  )}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  value={userId}\n                  onClick={() => chooseUser(userId)}\n                >\n                  {`User #${userId}`}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ntype Props = {\n  chooseUser: (userId: number) => void;\n  currentUserId: number;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ currentUserId, chooseUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(currentUserId)\n      .then(newUser => setUser(newUser));\n  }, [currentUserId]);\n\n  return (\n    <>\n      {user && (\n        <>\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                {`Selected user: ${user.id}`}\n              </span>\n            </h2>\n\n            <h3\n              className=\"CurrentUser__name\"\n              data-cy=\"userName\"\n            >\n              {user.name}\n            </h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clearButton\"\n            onClick={() => chooseUser(0)}\n          >\n            Clean User\n          </button>\n        </>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nexport const App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [statusTodo, setStatusTodo] = useState('All');\n\n  const chooseUser = (userId: number) => (\n    setSelectedUserId(userId)\n  );\n\n  useEffect(() => {\n    getTodos()\n      .then(all => setTodos(all));\n  }, []);\n\n  const filteredTodos\n  = todos.filter(({ title }) => title.toLowerCase()\n    .includes(query.toLowerCase()));\n\n  let showTodos = filteredTodos;\n\n  const changeStatusTodo = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatusTodo(event.target.value);\n  };\n\n  const preparedTodo = () => {\n    switch (statusTodo) {\n      case 'All':\n        return showTodos;\n      case 'Completed':\n        return filteredTodos.filter(({ completed }) => completed);\n      case 'Active':\n        return filteredTodos.filter(({ completed }) => !completed);\n\n      default:\n        return showTodos;\n    }\n  };\n\n  showTodos = preparedTodo();\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"App__sidebar\">\n        <form className=\"App__form\">\n          <p>Select Todos</p>\n          <input\n            onChange={(event) => setQuery(event.target.value)}\n            value={query}\n            type=\"text\"\n            id=\"search-query\"\n            className=\"App__input\"\n            placeholder=\"Type key-word\"\n            data-cy=\"filterByTitle\"\n          />\n\n          <select\n            name=\"todoFilter\"\n            value={statusTodo}\n            className=\"App__select\"\n            onChange={changeStatusTodo}\n          >\n            <option>All</option>\n            <option>Completed</option>\n            <option>Active</option>\n          </select>\n        </form>\n\n        <TodoList\n          todos={showTodos}\n          chooseUser={chooseUser}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              currentUserId={selectedUserId}\n              chooseUser={chooseUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}